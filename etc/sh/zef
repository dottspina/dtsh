# Copyright (c) 2022 Chris Duf <chris@openmarl.org>
#
# SPDX-License-Identifier: Apache-2.0

# Helper shell functions to initialize, open,
# and close Zephyr (West) workspaces.
#
# Zef like Zephyr and the Mediterranean wind.
#
# zef_init <workspc>: Initialize a new Zephyr (West) workspace.
#
# zef_open <workspc> <toolchain>: Open a Zephyr command line development
# 								  environment.
#
# zef_update: Update currrent workspace.
#
# zef_env: Dump Zephyr command line development environment.
#
# zef_close: Exit current workpace.


# Avoid double sourcing.
if [ -n "$ZEF" ]; then
    echo "zef: Won't source twice."
    zef_abort
fi
ZEF=sourced

# West workspace root: set by zef_open, unset by zef_close.
ZEF_BASE=
# PATH environment: set on zef_open, restored and unset on zef_close.
ZEF_BACK_PATH=

# Pretty VT.
vt_bold=$(tput bold)
vt_sgr0=$(tput sgr0)


################################################################################
# Initialize a new Zephyr (West) workspace.
#
# Will:
# - initialize a dedicated Python virtual env.
# - install West
# - initialize and update a Zephyr (West) workspace
# - install Zephyr requirements
# - configure *sane* workspace defaults
#
# SYNOPSIS
#   zef_init <workspc>
#
#   - <workspc>: absolute or relative path to new Zephyr/west workspace,
#                defaults to current working directory
zef_init() {
    _zef_assert_no_workspace

    local arg_workspc=$1
    if [ -n "$arg_workspc" ]; then
        arg_workspc=$(realpath -m $arg_workspc)
    else
        arg_workspc=$(pwd)
    fi
    local back_pwd=$(pwd)

    if [ -d "$arg_workspc" ]; then
        echo "Workspace root exists: $arg_workspc"
        zef_continue_yn 'Will remove existing content!'
        echo 'Removing ...'
        rm -rf $arg_workspc
        echo
    fi

    echo 'Will install Zephyr workspace and kernel to:'
    echo
    echo -e "${vt_bold}${arg_workspc}${vt_sgr0}"
    echo '│'
    echo '│   # Per-workspace Python venv, may be updated by west after manifest modification:'
    echo '├── .venv/'
    echo '│   └── bin                    # Python run-time and Zephyr tools (e.g. west, pyocd)'
    echo '│   └── lib                    # required Python libraries'
    echo '│'
    echo '├── .west/                     # Marks the location of the topdir'
    echo '│   └── config                 # per-workspace local configuration file'
    echo '│'
    echo '│   # The manifest repository, never modified by west after creation:'
    echo '├── zephyr/                    # .git/ repo'
    echo '│   ├── west.yml               # manifest file'
    echo '│   └── [... other files ...]'
    echo '│'
    echo '│   # Projects managed by west:'
    echo '├── modules/'
    echo '│   └── lib/'
    echo '│       └── tinycbor/          # .git/ project'
    echo '│'
    echo '└── [ ... other projects ...]'
    echo
    zef_continue_yn
    echo

    echo '**** Create Python venv ****'
    local arg_venv=${arg_workspc}/.venv
    _zef_venv_create $arg_venv
    echo

    echo '**** Install West ****'
    pip install -U west || zef_abort
    echo

    echo '**** Initialize workspace ****'
    west init $arg_workspc || zef_abort
    echo

    echo '**** Update workspace ****'
    cd $arg_workspc || zef_abort
    west update || zef_abort
    echo

    echo '**** Install Zephyr requirements ****'
    pip install -r ${arg_workspc}/zephyr/scripts/requirements.txt || zef_abort
    echo

    echo '**** Workspace configuration ****'
    west config --local build.pristine auto
    west config --local build.cmake-args -- -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
    west config --local build.generator "Unix Makefiles"
    west config -l
    echo

	echo 'Leaving workspace ...'
	deactivate
    cd $back_pwd || zef_abort
    echo 'done.'
}

################################################################################
# Open a Zephyr command line development environment (workspace and toolchain).
#
# Will:
# - activate the Zephyr (West) workspace Python environment
# - set ZEPHYR_BASE
# - configure the toolchain
# - configure West completion for bash or zsh
#
# SYNOPSIS
#   zef_open <workspc> <toolchain>
#
#   - <workspc>: absolute or relative path to a Zephyr/west workspace
#
#   - <toolchain>: absolute or relative path to the toolchain (GNU Arm Embedded,
#                  or Zephyr SDK)
zef_open() {
	_zef_assert_no_workspace

    local arg_workspc=$1
    local arg_toolchain=$2
	local back_path=$PATH

    _zef_workspc_set $arg_workspc
    _zef_toolchain_set $arg_toolchain
    ZEF_BASE=$arg_workspc
	ZEF_BACK_PATH=$back_path

    if [ -n "$BASH_VERSION" ]; then
        _zef_autocomp_setup_bash
    elif [ -n "$ZSH_VERSION" ]; then
        _zef_autocomp_setup_zsh
    fi
}

################################################################################
# Update current Zephyr command line development environment (West workspace).
#
# SYNOPSIS
#   zef_update
zef_update() {
	_zef_assert_workspace

    local back_pwd="$(pwd)"

    echo "Updating workspace ..."
    cd "$ZEPHYR_BASE" || zef_abort
	git pull || zef_abort
    west update || zef_abort

	# May the requirements change between versions ?
	pip install -r scripts/requirements.txt || zef_abort

    cd $back_pwd || zef_abort
}

################################################################################
# Close Zephyr command line development environment.
#
# Will:
# - Remove West commands from the shell autocomp
# - Unset related environment variables
# - Deactivate Zephyr workspace, restoring PATH
# - Restore PATH environment
#
# SYNOPSIS
#   zef_close
zef_close() {
    _zef_assert_workspace

    _zef_autocomp_remove
    _zef_toolchain_unset
    _zef_workspc_unset
    unset ZEF_BASE

	# Restore PATH.
	export PATH=$ZEF_BACK_PATH
	unset ZEF_BACK_PATH
}

################################################################################
# Dump Zephyr command line development environment.
#
# SYNOPSIS
#   zef_close
zef_env() {
	_zef_assert_workspace

    local back_pwd="$(pwd)"

	cd $ZEPHYR_BASE
	local kernel_version=$(git describe HEAD)

	echo "Workspace: ${vt_bold}${ZEF_BASE}${vt_sgr0}"
	echo "Python venv: $VIRTUAL_ENV"
	echo
	echo "Zephyr kernel: ${vt_bold}${kernel_version}${vt_sgr0}"
	echo "ZEPHYR_BASE: $ZEPHYR_BASE"
	echo
	echo "Toolchain variant: ${vt_bold}${ZEPHYR_TOOLCHAIN_VARIANT}${vt_sgr0}"
	if [ "$ZEPHYR_TOOLCHAIN_VARIANT" = 'zephyr' ]; then
		echo "Path: $ZEPHYR_SDK_INSTALL_DIR"
	else
		local varname=${ZEPHYR_TOOLCHAIN_VARIANT}_TOOLCHAIN_PATH
		varname=`echo $varname | tr a-z A-Z`
		eval "local toolchain_path=\$$varname"
		echo "${varname}: ${toolchain_path}"
	fi
	echo
	echo "PATH: $PATH"
	# TODO: Print a nice diff, something like:
	# diff <( printf '%s\n' "$ZEF_BACK_PATH" ) <( printf '%s\n' "$PATH" )
	# but with splitted strings:
	# https://stackoverflow.com/questions/918886/how-do-i-split-a-string-on-a-delimiter-in-bash

    cd $back_pwd || zef_abort
}


# Continue/abort prompt.
zef_continue_yn() {
    local arg_msg="$1"
    if [ -n "$arg_msg" ]; then
        echo "$arg_msg"
    fi
    echo -n 'Continue [yN]: '
    read yes_no
    case "$yes_no" in
        y|Y)
            ;;
        *)
			echo "Goodbye."
            # Exit the function stack without exiting shell.
			zef_abort
			;;
    esac
}

# Exit the function stack without exiting shell.
zef_abort() {
    kill -INT $$
}


################################################################################
# Private API.
################################################################################

################################################################################
# Set Zephyr (West) workspace.
#
# Will:
# - activate Python venv
# - set ZEPHYR_BASE
# - add ZEPHYR_BASE/scripts to PATH
#
# Contrary to $ZEPHYR_BASE/zephyr-env.sh, won't load ~/.zephyrrc
# or other custom configuration files.
#
# SYNOPSIS
#   zef_workspc_set <path>
#
#   - <path>: absolute path to a Zephyr/west workspace;
#             e.g. the path passed to zef_workspc_init().
_zef_workspc_set() {
    _zef_assert_no_workspace

    local arg_path="$1"
    if [ -z "$arg_path" ]; then
        echo 'Which wokspace ?'
        zef_abort
    fi

    arg_path="$(realpath -m $arg_path)"
    if [ ! -d "$arg_path" ]; then
        echo "Not a directory: $arg_path"
        zef_abort
    fi

    echo "Python venv: $arg_path/.venv"
    . "$arg_path/.venv/bin/activate" || zef_abort

    export ZEPHYR_BASE="$arg_path/zephyr"
    echo "ZEPHYR_BASE: $ZEPHYR_BASE"

    local scripts_path="$ZEPHYR_BASE/scripts"
    if ! echo "${PATH}" | grep -q "${scripts_path}"; then
         export PATH="$scripts_path:$PATH"
    fi
}

################################################################################
# Set the build toolchain.
#
# Will:
# - auto-detect the toolchain variant by looking for well-known files
# - configure the development environment for the detected toolchain
#
# SYNOPSIS
#   zef_toolchain_set <path>
#
#   - <path>: absolute path to the toolchain
_zef_toolchain_set() {
    local arg_path="$1"
    if [ -z "$arg_path" ]; then
        echo 'Which toolchain ?'
        zef_abort
    fi
    arg_path="$(realpath -m $arg_path)"
    if [ ! -d "$arg_path" ]; then
        echo "Not a directory: $arg_path"
        zef_abort
    fi

    local sdk_version_path="$arg_path/sdk_version"
    local gnuarm_gcc_path="$arg_path/bin/arm-none-eabi-gcc"

    if [ -f "$sdk_version_path" ]; then
        _zef_toolchain_zephyr_sdk "$arg_path"
    elif [ -f "$gnuarm_gcc_path" ]; then
        _zef_toolchain_gnuarmemb "$arg_path"
    else
        echo "Not a supported toolchain: $arg_path"
    fi
}

################################################################################
# Configure the development environment for the Zephyr SDK toolchain.
#
# Will:
# - set ZEPHYR_TOOLCHAIN_VARIANT to 'zephyr'
# - set ZEPHYR_SDK_INSTALL_DIR to the toolchain path
# - source $ZEPHYR_SDK_INSTALL_DIR/environment-setup-x86_64-pokysdk-linux
#   (adds the SDK toolchain to PATH)
#
# SYNOPSIS
#   zef_toolchain_zephyr_sdk <arg_path>
#
#   - <arg_path>: absolute path to the toolchain
_zef_toolchain_zephyr_sdk() {
    local arg_path="$1"

    export ZEPHYR_TOOLCHAIN_VARIANT=zephyr
    export ZEPHYR_SDK_INSTALL_DIR="$arg_path"

    if [ -f "$ZEPHYR_SDK_INSTALL_DIR/environment-setup-x86_64-pokysdk-linux" ]; then
        # Add zephyr-sdk/sysroots/x86_64-pokysdk-linux/usr/bin to PATH.
        . "$ZEPHYR_SDK_INSTALL_DIR/environment-setup-x86_64-pokysdk-linux"
    fi
	sdk_version=$(cat $ZEPHYR_SDK_INSTALL_DIR/sdk_version)

    echo "Toolchain: Zephyr SDK ($sdk_version)"
    echo "ZEPHYR_SDK_INSTALL_DIR: $ZEPHYR_SDK_INSTALL_DIR"
}

################################################################################
# Configure the development environment for GNU Arm Embedded toolchain.
#
# Will:
# - set ZEPHYR_TOOLCHAIN_VARIANT to 'gnuarmemb'
# - set GNUARMEMB_TOOLCHAIN_PATH to the toolchain path
# - enforce ZEPHYR_SDK_INSTALL_DIR is not set
# - add $GNUARMEMB_TOOLCHAIN_PATH/bin to PATH
#
# SYNOPSIS
#   zef_toolchain_gnuarmemb <path>
#
#   - <path>: absolute path to the toolchain
_zef_toolchain_gnuarmemb() {
    local arg_path="$1"

    export ZEPHYR_TOOLCHAIN_VARIANT=gnuarmemb
    export GNUARMEMB_TOOLCHAIN_PATH="$arg_path"
    # https://docs.zephyrproject.org/latest/getting_started/installation_linux.html
    # To build without the Zephyr SDK’s prebuilt host tools,
    # the ZEPHYR_SDK_INSTALL_DIR environment variable must be unset.
    unset ZEPHYR_SDK_INSTALL_DIR

    echo "Toolchain: GNU Arm Embedded ($ZEPHYR_TOOLCHAIN_VARIANT)"
    echo "GNUARMEMB_TOOLCHAIN_PATH: $GNUARMEMB_TOOLCHAIN_PATH"

    # Add toolchain to PATH for convenience.
    export PATH="$GNUARMEMB_TOOLCHAIN_PATH/bin:$PATH"
}

################################################################################
# Unset the build toolchain.
# Will unset ZEPHYR_TOOLCHAIN_VARIANT and ZEPHYR_SDK_INSTALL_DIR.
_zef_toolchain_unset() {
    unset ZEPHYR_TOOLCHAIN_VARIANT
    unset ZEPHYR_SDK_INSTALL_DIR
}

################################################################################
# Unset Zephyr (West) workspace.
#
# Will:
# - unset ZEPHYR_BASE
# - deactivate Python venv (restoring PATH)
_zef_workspc_unset() {
    unset ZEPHYR_BASE
    deactivate
}

################################################################################
# Add West commands auto-completion (bash).
# Will create the completion file if needed.
_zef_autocomp_setup_bash() {
	_zef_assert_workspace
    local west_completion_path="$ZEF_BASE/west-completion.bash"

    if [ ! -f  "$west_completion_path" ]; then
		echo "West bash completion: generating ..."
		west completion bash > "$west_completion_path"
	fi
    if [ -f  "$west_completion_path" ]; then
        echo "West (bash) completion: $west_completion_path"
        . "$west_completion_path"
    fi
}

################################################################################
# Add West commands auto-completion (zsh).
# Will create the completion file if needed.
_zef_autocomp_setup_zsh() {
	_zef_assert_workspace
    local west_completion_path="$ZEF_BASE/west-completion.zsh"

    if [ ! -f  "$west_completion_path" ]; then
		echo "West zsh completion: generating ..."
		west completion zsh > "$west_completion_path"
    fi
    if [ -f  "$west_completion_path" ]; then
        echo "West (zsh) completion: $west_completion_path"
        . "$west_completion_path"
    fi
}

################################################################################
# Remove West commands auto-completion from the shell (bash or zsh).
_zef_autocomp_remove() {
    if complete -p west > /dev/null 2>&1; then
        complete -r west
    fi
}

################################################################################
# Initialize a new Python venv with updated pip and setuptools.
#
# SYNOPSIS
#   zef_venv_create <path>
#
#  - <path> absolute or relative path to the virtual environment.
_zef_venv_create() {
    local arg_path="$1"
    if [ -n "$arg_path" ]; then
        arg_path="$(realpath -m $arg_path)"
    else
        echo 'Where ?'
        zef_abort
    fi
    if [ -d "$arg_path" ]; then
        echo "Directory exists: $arg_path"
        zef_continue_yn
        rm -rf "$arg_path"
    fi

    python -m venv "$arg_path" || zef_abort
    . "$arg_path/bin/activate" || zef_abort
    pip install -q --upgrade pip setuptools || zef_abort
}


################################################################################
# Private helpers.
################################################################################

# Abort if no workspace.
_zef_assert_workspace() {
    if [ -z "$ZEF_BASE" ]; then
        echo 'No active Zephyr workspace.'
		zef_abort
    fi
}

# Abort if workspace.
_zef_assert_no_workspace() {
    if [ -n "$ZEF_BASE" ]; then
        echo 'A Zephyr workspace is already active.'
		zef_abort
    fi
}

