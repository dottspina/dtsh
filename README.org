#+title: dtsh

*dtsh* is an interactive /shell-like/ interface with a devicetree and its bindings:

- browse the devicetree through a familiar hierarchical file-system metaphor
- retrieve nodes and bindings with accustomed command names and command line syntax
- generate simple documentation artifacts by redirecting commands output to files (text, HTML, SVG)
- common command line interface paradigms (auto-completion, history) and keybindings

It's said an ~ls /soc -l > soc.svg~ speaks a thousand words:

[[./doc/img/soc.svg]]

#+begin_quote
DISCLAIMER: This software was created as a Proof of Concept for a simple tool
that could assist newcomers to Zephyr in understanding what a devicetree is,
and how bindings describe and constrain its content.

It's still in its inception phase:

- while the current feature set might already prove helpful to beginners,
  it may also quickly frustrate more knowledgeable users
- possible bugs could instead confuse beginners (unfortunately)
- should install and run more or less Out Of The Box™ on most modern Linux distributions,
  mileage may vary on other platforms
- should be compatible with any source file in DTS format, but requires that the bindings are consistently available as YAML files: this does NOT directly apply to the devicetree use by the Linux kernel

All kinds of feedback and contribution are encouraged: please refer to the bottom CONTRIBUTE section.
#+end_quote

- [[https://github.com/dottspina/dtsh#get-started][Get started]]
  - [[https://github.com/dottspina/dtsh#requirements][Requirements]]
  - [[https://github.com/dottspina/dtsh#install][Install]]
  - [[https://github.com/dottspina/dtsh#run][Run]]
  - [[https://github.com/dottspina/dtsh#zephyr-integration][Zephyr integration]]
- [[https://github.com/dottspina/dtsh#users-guide][User's guide]]
  - [[https://github.com/dottspina/dtsh#the-shell][The shell]]
  - [[https://github.com/dottspina/dtsh#user-interface][User interface]]
  - [[https://github.com/dottspina/dtsh#how-to][How To]]
- [[https://github.com/dottspina/dtsh#contribute][Contribute]]
- [[https://github.com/dottspina/dtsh#references][References]]

* Get started

 ~dtsh~ is written in Python and has few requirements: it should install and run just fine on most /modern POSIX-like/
 operating systems.

#+begin_example
# Install dtsh in a dedicated Python virtual environment
$ python -m venv --prompt dtsh .venv
$ . .venv/bin/activate
$ pip install dtsh

# Setting ZEPHYR_BASE will help dtsh in building a default bindings search path
export ZEPHYR_BASE=/path/to/zephyrproject/zephyr

# Open an existing DTS file, using Zephyr bindings
$ dtsh /path/to/build/zephyr/zephyr.dts
dtsh (0.1.0a3): Shell-like interface to a devicetree
Help: man dtsh
How to exit: q, or quit, or exit, or press Ctrl-D

/
❯ tree -L 1 -l
/
├──  chosen
├──  aliases
├──  soc
├──  pin-controller   The nRF pin controller is a singleton node responsible for controlling…
├──  entropy_bt_hci   Bluetooth module that uses Zephyr's Bluetooth Host Controller Interface as…
├──  cpus
├──  sw-pwm           nRFx S/W PWM
├──  leds             This allows you to define a group of LEDs. Each LED in the group is…
├──  pwmleds          PWM LEDs parent node
├──  buttons          GPIO KEYS parent node
├──  connector        GPIO pins exposed on Arduino Uno (R3) headers…
└──  analog-connector ADC channels exposed on Arduino Uno (R3) headers…
#+end_example

To get the /big picture/:

- may be this [[https://youtu.be/pc2AMx1iPPE][short abrupt video]], that at least illustrates the main /shell metaphor/, the auto-completion behavior
   and the most useful keybindings
- if already comfortable with Zephyr, running the [[https://github.com/dottspina/dtsh#interactive-tests][interactive tests]]
   is probably the preferred route to explore ~dsh~

** Requirements

Most ~dtsh~ requirements should already be fulfilled wherever a Zephyr development environment is installed.

*** POSIX

This is an abusive keyword for facilities most POSIX-like operating systems provide one way or another:

- the [[https://tiswww.cwru.edu/php/chet/readline/rltop.html][GNU readline]] (or [[https://www.thrysoee.dk/editline/][editline]]) library we rely upon for command line auto-completion, commands history,
   and standardized keybindings
- an ANSI ([[https://www.ecma-international.org/publications-and-standards/standards/ecma-48/][ECMA-48]]) terminal emulator, preferably 256 colors support and a font that includes unicode glyphs
   for a few common symbols
- a /pager/, preferably with ANSI escape codes support, e.g. [[https://www.greenwoodsoftware.com/less/faq.html][less]]

*** Python

The minimal requirement is set to Python 3.7, with proper support for [[https://pip.pypa.io/en/stable/][pip]], [[https://setuptools.pypa.io/en/latest/setuptools.html][setuptools]] and [[https://peps.python.org/pep-0427/][wheel]].

All ~dtsh~ software requirements are Python libraries that will be installed as direct dependencies:

- DT sources and bindings /parser/, devicetree model: ~edtlib~, now maintained as part of the Zephyr project ([[https://github.com/zephyrproject-rtos/python-devicetree][GitHub]], [[https://pypi.org/project/devicetree/][PyPI]])
- « rich text and beautiful formatting in the terminal »: [[https://www.textualize.io/][Textualize]] /rich/ API ([[https://github.com/Textualize/rich][GitHub]], [[https://pypi.org/project/rich/][PyPI]])

*** CMake

~dtsh~ may need to access a few CMake cached variables for setting sensible default values,
e.g. when building the default bindings search path.

** Install

It's recommended to install ~dtsh~ in a dedicated Python virtual environment.

*** Python virtual environment

A Python /best practice/ is to always install a consistent set of /scripts/ and their dependencies in a dedicated
[[https://peps.python.org/pep-0405/][virtual environment]], with up-to-date ~pip~, ~setuptools~ and ~wheel~ packages.

#+begin_src sh
python -m venv .venv
. .venv/bin/activate
pip install --upgrade pip setuptools wheel
#+end_src

See also [[https://packaging.python.org/en/latest/guides/installing-using-pip-and-virtual-environments/][Installing packages using pip and virtual environments]].

*** Install from sources

Install from sources in a dedicated Python virtual environment:

#+begin_src sh
git clone https://github.com/dottspina/dtsh.git
cd dtsh
python -m venv .venv
. .venv/bin/activate
pip install --upgrade pip setuptools wheel
pip install .
#+end_src

*** Install from PyPI

Install from [[https://pypi.org/project/dtsh/][PyPI]] in a dedicated Python virtual environment:

#+begin_src sh
python -m venv --prompt dtsh .venv
. .venv/bin/activate
pip install --upgrade pip setuptools
pip install dtsh
#+end_src

*** Uninstall

To remove ~dtsh~ and all its direct dependencies from a dedicated virtual environment:

#+begin_src sh
. /path/to/.venv/bin/activate
pip uninstall dtsh rich Pygments devicetree
#+end_src

** Run

To start a shell session: ~dtsh [<dts-file>] [<binding-dir>*]~

where:

- ~<dts-file>~: path to the devicetree source file in  [[https://devicetree-specification.readthedocs.io/en/latest/chapter6-source-language.html][DTS Format]] (~.dts~);
  if unspecified, defaults to ~$PWD/build/zephyr/zephyr.dts~
- ~<binding-dir>~: directory to search for  [[https://yaml.org/][YAML]] binding files;
  if unspecified, and the environment variable ~ZEPHYR_BASE~ is set,
  defaults to [[https://docs.zephyrproject.org/latest/build/dts/bindings.html#where-bindings-are-located][Zephyr bindings search path]]
  (may require CMake, see [[https://github.com/dottspina/dtsh/issues/1][Incomplete Zephyr bindings search path #1]] for details)

To open an arbitrary DTS file with custom bindings:

#+begin_example
$ dtsh /path/to/foobar.dts /path/to/custom/bindings /path/to/other/custom/bindings
#+end_example

To open the same DTS file, with /default/ bindings:

#+begin_example
$ export ZEPHYR_BASE=/path/to/zephyr
$ dtsh /path/to/foobar.dts
#+end_example

On startup, ~dtsh~ will output a banner, followed by the first prompt:

#+begin_example
dtsh (0.1.0a3): Shell-like interface to a devicetree
Help: man dtsh
How to exit: q, or quit, or exit, or press Ctrl-D

/
❯
#+end_example

** Zephyr integration

We'll assume a [[https://docs.zephyrproject.org/latest/develop/west/][west]]-managed Zephyr [[https://docs.zephyrproject.org/latest/develop/west/basics.html#example-workspace][workspace]] with a typical file layout
(see [[https://docs.zephyrproject.org/latest/develop/getting_started/#get-zephyr-and-install-python-dependencies][Get Zephyr and install Python dependencies]]):

#+begin_src
zephyrproject/                 # Workspace topdir
│
│   # Per-workspace Python virtual environment, may be updated by west after manifest modification:
├── .venv/
│   └── bin                    # Python run-time and Zephyr tools (e.g. west, pylink, pyocd)
│   └── lib                    # required Python libraries
│
├── .west/                     # marks the location of the workspace topdir
│   └── config                 # per-workspace local configuration file
│
│   # The manifest repository, never modified by west after creation:
├── zephyr/                    # .git/ repo
│   └── west.yml               # manifest file
│
│   # Projects managed by west:
├── modules/
│   └── lib/
│       └── tinycbor/          # .git/ project
├── net-tools/                 # .git/ project
└── [ ... other projects ...]
#+end_src

It's then possible to install ~dtsh~ in the same /command line development environment/ as ~west~:

#+begin_src sh
# Activate the Python venv as usual, e.g.:
. /path/to/zephyrproject/.venv/bin/activate

# Install latest dtsh release from PyPI
pip install dtsh
#+end_src

And to simply run ~dtsh~ without any argument:

#+begin_src sh
# Activate the Python venv as usual, e.g.:
. /path/to/zephyrproject/.venv/bin/activate
# Set the Zephyr kernel environment as usual, e.g.:
. /path/to/zephyrproject/zephyr/zephyr-env.sh

# Build the Zephyr firmware as usual, e.g.:
west build $ZEPHYR_BASE/samples/sensor/bme680
# Open the generated DTS file build/zephyr/zephyr.dts using default bindings
dtsh
#+end_src

To remove ~dtsh~ from a Zephyr workspace:

#+begin_src sh
. /path/to/zephyrproject/.venv/bin/activate
pip uninstall dtsh rich
#+end_src

* User's guide

The preferred entry point to the ~dtsh~ documentation should be its manual pages:

- ~man dtsh~: open the shell manual page (mostly similar to this user guide)
- ~man <CMD>~: open the manual page for the command ~<CMD>~

** The shell

~dtsh~ defines a set of /built-in/ commands that interface with a devicetree and its bindings through a hierarchical file-system metaphor.

Loading of /external commands/ is not (yet) supported.

*** File system metaphor

Within a ~dtsh~ session, a devicetree shows itself as a familiar hierarchical file-system,
where [[https://devicetree-specification.readthedocs.io/en/stable/devicetree-basics.html#path-names][path names]] /look like/ paths to files or directories, depending on the acting shell command.

A current /working node/ is defined, similar to any shell's current working directory,
allowing ~dtsh~ to also support relative paths.

A leading ~.~ represents the current working node, and ~..~ its parent.
The devicetree root node is its own parent.

To designate properties, ~dtsh~ use ~$~ as a separator between DT path names and [[https://devicetree-specification.readthedocs.io/en/stable/devicetree-basics.html#property-names][property names]]
(should be safe since ~$~ is an invalid character for both node and property names).

Some commands support filtering or /globbing/ with trailing wild-cards ~*~.

*** Command string

The ~dtsh~ command string is based on the [[https://www.gnu.org/software/libc/manual/html_node/Using-Getopt.html][GNU getopt]] syntax.

**** Synopsis

All built-ins share the same synopsis:

#+begin_example
CMD [OPTIONS] [PARAMS]
#+end_example

where:

- ~CMD~: the built-in name, e.g. ~ls~
- ~OPTIONS~: the options the command is invoked with, e.g. ~-l~
- ~PARAMS~: the parameters the command is invoked for, e.g. a path name

~OPTIONS~ and ~PARAMS~ are not positional: ~ls -l /soc~ is equivalent to ~ls /soc -l~.

**** Options

An option may support:

- a short name, starting with a single ~-~ (e.g. ~-h~)
- a long name, starting with ~--~ (e.g. ~--help~)

Short option names can combine: ~-lR~ is equivalent to ~-l -R~.

Options semantic should be consistent across commands, e.g. ~-l~ always means /long format/.

We also try to re-use /well-known/ option names, e.g. ~-r~ for /reverse sort/ or ~-R~ for /recursive/.

*** Built-ins

| Built-in |                                           |
|----------+-------------------------------------------|
| ~alias~    | print defined aliases                     |
| ~chosen~   | print chosen configuration                |
| ~pwd~      | print current working node's path         |
| ~cd~       | change current working node               |
| ~ls~       | list devicetree nodes                     |
| ~tree~     | list devicetree nodes in tree-like format |
| ~cat~      | concatenate and print devicetree content  |
| ~man~      | open a manual page                        |

*** Manual pages

As expected, the ~man~ command will open the manual page for the shell itself (~man dtsh~),
or one of its built-ins (e.g. ~man ls~).

 ~man~ may also open a manual page for a [[https://devicetree-specification.readthedocs.io/en/latest/chapter2-devicetree-basics.html#compatible][compatible]], which is essentially a view of its (YAML) bindings: e.g.  ~man --compat nordic,nrf-radio~

  ~man~ should eventually also serve as an entry point to external useful or normative documents,
  e.g. the Devicetree Specifications or the Zephyr project's documentation.

*** System information

**dtsh** may also expose /system/ information, including:

- the Zephyr kernel version, e.g. ~zephyr-3.1.0~, with a link to the corresponding
  release notes when available
- board information, based on the content of its YAML binding file,
  with a link to the corresponding documentation when the board
  is [[https://docs.zephyrproject.org/latest/boards/index.html][supported by Zephyr]]
- the configured /toolchain/, either Zephyr SDK or GNU Arm Embedded

Retrieving this information may involve environment variables (e.g. ~ZEPHYR_BASE~),
CMake cached variables (e.g. ~BOARD_DIR~), and  ~git~ or ~GCC~.

Refer to `man uname` for details.

** User interface

The ~dtsh~ command line interface paradigms and keybindings should sound familiar.

*** The prompt

The default shell prompt is ❯.
The line immediately above the prompt shows the current working node's path.

#+begin_example
/
❯ pwd
/

/
❯ cd /soc/i2c@40003000/bme680@76

/soc/i2c@40003000/bme680@76
❯ pwd
/soc/i2c@40003000/bme680@76

#+end_example

Pressing ~C-d~ (aka ~CTRL-D~) at the prompt will exit the ~dtsh~ session.

*** Commands history

Commands history is provided through GNU readline integration.

At the shell prompt, press:

- up arrow (↑) to navigate the commands history backward
- down arrow (↓) to navigate the commands history forward
- ~C-r~ (aka ~CTRL-R~) to /reverse search/ the commands history

The history file (typically ~$HOME/.config/dtsh/history~) is saved on exit, and loaded on startup.

*** Auto-completion

Command line auto-completion is provided through GNU readline integration.

Auto-completion is triggered by first pressing the ~TAB~ key twice,
then once for subsequent completions of the same command line, and may apply to:

- command names (aka built-ins)
- command options
- command parameters such as node paths or compatibles

*** The pager

Built-ins that may produce large outputs support the ~--pager~ option: the command's output is then
/paged/ using the system pager, typically ~less~:

- use up (↑) and down (↓) arrows to navigate line by line
- use page up (⇑) and down (⇓) to navigate /window/ by /window/
- press ~g~ go to first line
- press ~G~ go to last line
- press ~/~ to enter search mode
- press ~h~ for help
- press ~q~ to quit the pager and return to the ~dtsh~ prompt

On the contrary, the ~man~ command uses the pager by default and defines a ~--no-pager~ option to disable it.

*** External links

~dtsh~ commands output may contain links to external documents such as:

- the local YAML binding files, that should open in the system's default  text editor
- the Devicetree specifications or the Zephyr project's documentation,
   that should open in the system's default web browser

How these links will appear in the console, and whether they are /actionable/ or not,
eventually depend on the terminal.

*** Output redirection

Command output redirection uses the well-known syntax:

#+begin_example
CMD [OPTIONS] [PARAMS] > PATH
#+end_example

where ~PATH~ is the absolute or relative path to the file the command output will be redirected to.

Depending on the extension, the command output may be saved as an HTML page (~.html~),  an SVG image (~.svg~),
or a text file (default).

For example:

#+begin_example
/
❯ ls -l soc > soc.html

#+end_example

*** Keybindings

Familiar keybindings are provided through GNU readline integration.

| Keyboard shortcut |                                              |
|-------------------+----------------------------------------------|
| ~C-l~               | clear terminal screen                        |
| ~C-a~               | move cursor to beginning of command line     |
| ~C-e~               | move cursor to end of command line           |
| ~C-k~               | /kill/ text from cursor to end of command line |
| ~M-d~               | /kill/ word at cursor                          |
| ~C-y~               | /yank/ (paste) the content of the /kill buffer/  |
| ~C-←~               | move cursor one word backward                |
| ~C-→~               | move cursor one word forward                 |
| ~↑~                 | navigate the commands history backward       |
| ~↓~                 | navigate the commands history forward        |
| ~C-r~               | search the commands history                  |
| ~TAB~               | trigger auto-completion                      |

where:

- e.g. ~C-c~ means hold the ~CTRL~ key, then press ~C~
- e.g. ~M-d~ means hold the ~Alt~ (/meta/) key, then press ~D~

*** Theme

Colors and such are subjective, and most importantly the rendering will
eventually depend on the terminal's font and palette,
possibly resulting in severe accessibility issues, e.g. grey text on white background
or a weird shell prompt.

In such situations, or to accommodate personal preferences, users can try to override
~dtsh~ colors (and prompt) by creating a /theme/ file  (typically ~$HOME/.config/dtsh/theme~).

Use the [[https://github.com/dottspina/dtsh/blob/main/src/dtsh/theme][default theme]] as template:

#+begin_src sh
cp src/dtsh/theme ~/.config/dtsh/theme
#+end_src

** How To
*** SoC overview

Try  ~ls -lR --pager /soc~

*** Board definition

Try ~uname -ml~

*** Options Cheat Sheet

Command options list:

#+begin_example
/
❯ ls -h
ls [-d] [-l] [-r] [-R] [--pager] [-h --help] [PATH]
#+end_example

Command options summary (press ~TAB~ twice after the ~-~ character that starts
option names):

#+begin_example
/
❯ ls -
-d        list node itself, not its content
-l        use rich listing format
-r        reverse order while sorting
-R        list node contents recursively
-h --help print usage summary
--pager   page command output
#+end_example

* Contribute

All kinds of feedback and contribution are encouraged: open an [[https://github.com/dottspina/dtsh/issues/new][issue]]  or a [[https://github.com/dottspina/dtsh/pulls][pull request]] with the appropriate [[https://github.com/dottspina/dtsh/issues/labels][label]].

| Label                |                                           |
|----------------------+-------------------------------------------|
| ~RFC~                  | Participate in Request For Comments       |
| ~features~             | Ask for new features and improvements     |
| ~bug~                  | The software does not behave as specified |
| ~help & documentation~ | Ask for help, documentation updates       |

** Request For Comments

This project is still exploring /what could be/:

- an educational tool that would assist students and professors when introducing /devicetrees/
- an handy debug or discovery tool that would at a glance show how a /board/ is configured,
  which buses and devices are supported and if they are enabled, the memory layout for mapped peripherals and suchlike

To provide feedback regarding theses topics, please open issues with the ~RFC~ label.

If specifically asking for new functionalities or improvements, prefer the ~features~ label.

** Getting Help

When the documentation is lacking, confusing or incorrect, please open issues with the ~help & documentation~ label.

** Report bugs

This software is still in alpha state, and is tested mostly with the DTS files generated when
building a few Zephyr sample applications for the nRF52840 DK [[https://docs.zephyrproject.org/latest/boards/arm/nrf52840dk_nrf52840/doc/index.html][board]]: bugs are expected,
please open issues with the ~bug~ label.

** Hacking dtsh

Hack into ~dtsh~ and contribute [[https://github.com/dottspina/dtsh/pulls][pull requests]] (bug fix, features, documentation, code review).

*** Development mode installation

Install ~dtsh~ in development mode:

#+begin_src sh
git clone https://github.com/dottspina/dtsh.git
cd dtsh
python -m venv .venv
. .venv/bin/activate
pip install --upgrade pip setuptools wheel
pip install --editable .
#+end_src

The ~--editable~ option asks ~pip~ to install ~dtsh~ as an editable /working copy/.

*** Unit tests

To run a few unit tests:

#+begin_src sh
cd dtsh
. .venv/bin/activate
# install test requirements
pip install ".[test]"
# run unit tests
python -m pytest tests
#+end_src

*** Interactive tests

The [[https://github.com/dottspina/dtsh/tree/main/etc/sh][etc/sh]] folder contains a few helper scrips that, while not originally written
with a public use in mind, may prove helpful in hacking through ~dtsh~.

In particular ~interactive-tests.sh~, that will sequentially run ~dtsh~
for various boards and configurations:

#+begin_example
==== UC7: DTS from Zephyr build, Zephyr bindings
     Bindings search path: $ZEPHYR_BASE/dts/bindings
     Toolchain (dtsh): Zephyr SDK
     Application: coap_client
     Board: mimxrt1170_evk_cm7
Run test [yN]:
#+end_example

The synopsis is:

#+begin_example
etc/sh/interactive-tests.sh [ZEPHYR_BASE TOOLCHAIN_BASE]
#+end_example

Where:

- ~ZEPHYR_BASE~ would be a valid value for the environment variable ~ZEPHYR_BASE~ (sic)
- ~TOOLCHAIN_BASE~ would be a valid value for ~ZEPHYR_SDK_INSTALL_DIR~ or
  ~$GNUARMEMB_TOOLCHAIN_PATH~ (the script /should/ auto-detect the toolchain variant
  and set ~ZEPHYR_TOOLCHAIN_VARIANT~ accordingly)

When started without parameters, ~interactive-tests.sh~ will default to hard-coded values
that match the test platform file-system, and won't make sense anywhere else.
They are easy to change, though.

WARNING:

- tests ~UC3~ to ~UC9~ will install (uninstall) ~dtsh~ into (from) the Python environment of
  the West workspace parent of ~ZEPHYR_BASE~
- tests ~UC8~ and ~UC9~ are expected to fail if GCC Arm 10 and 11 are not installed at the
  locations determined by the above hard-coded values

*** Notes

While probably not so /pythonesque/, the source code should eventually seem obvious,
and friendly to hacking and prototyping.

For example, to define a new built-in:

- look for the ~DtshCommand~ and ~DtshCommandOption~ classes ([[https://github.com/dottspina/dtsh/blob/main/src/dtsh/dtsh.py][dtsh.dtsh]] module) to get the basics
- copy an existing command (e.g. [[https://github.com/dottspina/dtsh/blob/main/src/dtsh/builtin_ls.py][ls]]) as a template,  and customize it
- re-use or improve helpers and views in the [[https://github.com/dottspina/dtsh/blob/main/src/dtsh/tui.py][dtsh.tui]] module to assemble the command output
  (see also the /rich/ [[https://rich.readthedocs.io/en/stable/console.html][Console API]])
- when ready, register it in the ~dtsh.shell.DevicetreeShell~ constructor
* References

More or less introductory references about /devicetrees/.

** Devicetree Specifications

- [[https://devicetree-specification.readthedocs.io/en/latest/][Online Devicetree Specifications]] (latest)
- [[https://devicetree-specification.readthedocs.io/en/stable/][Online Devicetree Specifications]] (stable)

** Zephyr

- [[https://docs.zephyrproject.org/latest/build/dts/intro.html][Introduction to devicetree]]
- [[https://docs.zephyrproject.org/latest/build/dts/bindings.html][Devicetree bindings]]
- [[https://docs.zephyrproject.org/latest/build/dts/api/bindings.html][Bindings index]]
- [[https://docs.zephyrproject.org/latest/build/dts/api/api.html#zephyr-specific-chosen-nodes][Zephyr-specific chosen nodes]]
- [[https://docs.zephyrproject.org/latest/build/dts/dt-vs-kconfig.html][Devicetree versus Kconfig]]

** Linux

- [[https://docs.kernel.org/devicetree/index.html][Open Firmware and Devicetree]]
- [[https://elinux.org/Device_Tree_Usage][Device Tree Usage]]
- [[https://elinux.org/Device_Tree_Reference][Device Tree Reference]]
- [[https://elinux.org/Device_Tree_What_It_Is][Device Tree What It Is]]

